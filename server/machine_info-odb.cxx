// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "machine_info-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // Memory
  //

  bool access::composite_value_traits< ::Memory, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // mem_total
    //
    t[0UL] = 0;

    // mem_available
    //
    t[1UL] = 0;

    // mem_free
    //
    t[2UL] = 0;

    return grew;
  }

  void access::composite_value_traits< ::Memory, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // mem_total
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.mem_total_value;
    b[n].is_null = &i.mem_total_null;
    n++;

    // mem_available
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.mem_available_value;
    b[n].is_null = &i.mem_available_null;
    n++;

    // mem_free
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.mem_free_value;
    b[n].is_null = &i.mem_free_null;
    n++;
  }

  bool access::composite_value_traits< ::Memory, id_pgsql >::
  init (image_type& i,
        const value_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // mem_total
    //
    {
      int const& v =
        o.mem_total;

      bool is_null (false);
      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_image (
        i.mem_total_value, is_null, v);
      i.mem_total_null = is_null;
    }

    // mem_available
    //
    {
      int const& v =
        o.mem_available;

      bool is_null (false);
      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_image (
        i.mem_available_value, is_null, v);
      i.mem_available_null = is_null;
    }

    // mem_free
    //
    {
      int const& v =
        o.mem_free;

      bool is_null (false);
      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_image (
        i.mem_free_value, is_null, v);
      i.mem_free_null = is_null;
    }

    return grew;
  }

  void access::composite_value_traits< ::Memory, id_pgsql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // mem_total
    //
    {
      int& v =
        o.mem_total;

      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_value (
        v,
        i.mem_total_value,
        i.mem_total_null);
    }

    // mem_available
    //
    {
      int& v =
        o.mem_available;

      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_value (
        v,
        i.mem_available_value,
        i.mem_available_null);
    }

    // mem_free
    //
    {
      int& v =
        o.mem_free;

      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_value (
        v,
        i.mem_free_value,
        i.mem_free_null);
    }
  }

  // CPU
  //

  bool access::composite_value_traits< ::CPU, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // idle_time
    //
    t[0UL] = 0;

    // use_time
    //
    t[1UL] = 0;

    return grew;
  }

  void access::composite_value_traits< ::CPU, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // idle_time
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.idle_time_value;
    b[n].is_null = &i.idle_time_null;
    n++;

    // use_time
    //
    b[n].type = pgsql::bind::real;
    b[n].buffer = &i.use_time_value;
    b[n].is_null = &i.use_time_null;
    n++;
  }

  bool access::composite_value_traits< ::CPU, id_pgsql >::
  init (image_type& i,
        const value_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // idle_time
    //
    {
      float const& v =
        o.idle_time;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.idle_time_value, is_null, v);
      i.idle_time_null = is_null;
    }

    // use_time
    //
    {
      float const& v =
        o.use_time;

      bool is_null (false);
      pgsql::value_traits<
          float,
          pgsql::id_real >::set_image (
        i.use_time_value, is_null, v);
      i.use_time_null = is_null;
    }

    return grew;
  }

  void access::composite_value_traits< ::CPU, id_pgsql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // idle_time
    //
    {
      float& v =
        o.idle_time;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.idle_time_value,
        i.idle_time_null);
    }

    // use_time
    //
    {
      float& v =
        o.use_time;

      pgsql::value_traits<
          float,
          pgsql::id_real >::set_value (
        v,
        i.use_time_value,
        i.use_time_null);
    }
  }

  // Process
  //

  bool access::composite_value_traits< ::Process, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // total
    //
    t[0UL] = 0;

    // running
    //
    t[1UL] = 0;

    // blocked
    //
    t[2UL] = 0;

    return grew;
  }

  void access::composite_value_traits< ::Process, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // total
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.total_value;
    b[n].is_null = &i.total_null;
    n++;

    // running
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.running_value;
    b[n].is_null = &i.running_null;
    n++;

    // blocked
    //
    b[n].type = pgsql::bind::integer;
    b[n].buffer = &i.blocked_value;
    b[n].is_null = &i.blocked_null;
    n++;
  }

  bool access::composite_value_traits< ::Process, id_pgsql >::
  init (image_type& i,
        const value_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // total
    //
    {
      int const& v =
        o.total;

      bool is_null (false);
      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_image (
        i.total_value, is_null, v);
      i.total_null = is_null;
    }

    // running
    //
    {
      int const& v =
        o.running;

      bool is_null (false);
      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_image (
        i.running_value, is_null, v);
      i.running_null = is_null;
    }

    // blocked
    //
    {
      int const& v =
        o.blocked;

      bool is_null (false);
      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_image (
        i.blocked_value, is_null, v);
      i.blocked_null = is_null;
    }

    return grew;
  }

  void access::composite_value_traits< ::Process, id_pgsql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // total
    //
    {
      int& v =
        o.total;

      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_value (
        v,
        i.total_value,
        i.total_null);
    }

    // running
    //
    {
      int& v =
        o.running;

      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_value (
        v,
        i.running_value,
        i.running_null);
    }

    // blocked
    //
    {
      int& v =
        o.blocked;

      pgsql::value_traits<
          int,
          pgsql::id_integer >::set_value (
        v,
        i.blocked_value,
        i.blocked_null);
    }
  }

  // SystemInfo
  //

  bool access::composite_value_traits< ::SystemInfo, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // system_ip
    //
    if (t[0UL])
    {
      i.system_ip_value.capacity (i.system_ip_size);
      grew = true;
    }

    // system_name
    //
    if (t[1UL])
    {
      i.system_name_value.capacity (i.system_name_size);
      grew = true;
    }

    return grew;
  }

  void access::composite_value_traits< ::SystemInfo, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (b);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);
    ODB_POTENTIALLY_UNUSED (n);

    // system_ip
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.system_ip_value.data ();
    b[n].capacity = i.system_ip_value.capacity ();
    b[n].size = &i.system_ip_size;
    b[n].is_null = &i.system_ip_null;
    n++;

    // system_name
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.system_name_value.data ();
    b[n].capacity = i.system_name_value.capacity ();
    b[n].size = &i.system_name_size;
    b[n].is_null = &i.system_name_null;
    n++;
  }

  bool access::composite_value_traits< ::SystemInfo, id_pgsql >::
  init (image_type& i,
        const value_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // system_ip
    //
    {
      ::std::string const& v =
        o.system_ip;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.system_ip_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.system_ip_value,
        size,
        is_null,
        v);
      i.system_ip_null = is_null;
      i.system_ip_size = size;
      grew = grew || (cap != i.system_ip_value.capacity ());
    }

    // system_name
    //
    {
      ::std::string const& v =
        o.system_name;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.system_name_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.system_name_value,
        size,
        is_null,
        v);
      i.system_name_null = is_null;
      i.system_name_size = size;
      grew = grew || (cap != i.system_name_value.capacity ());
    }

    return grew;
  }

  void access::composite_value_traits< ::SystemInfo, id_pgsql >::
  init (value_type& o,
        const image_type&  i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // system_ip
    //
    {
      ::std::string& v =
        o.system_ip;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.system_ip_value,
        i.system_ip_size,
        i.system_ip_null);
    }

    // system_name
    //
    {
      ::std::string& v =
        o.system_name;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.system_name_value,
        i.system_name_size,
        i.system_name_null);
    }
  }

  // machineinfo
  //

  const char access::object_traits_impl< ::machineinfo, id_pgsql >::
  persist_statement_name[] = "persist_machineinfo";

  const char access::object_traits_impl< ::machineinfo, id_pgsql >::
  find_statement_name[] = "find_machineinfo";

  const char access::object_traits_impl< ::machineinfo, id_pgsql >::
  update_statement_name[] = "update_machineinfo";

  const char access::object_traits_impl< ::machineinfo, id_pgsql >::
  erase_statement_name[] = "erase_machineinfo";

  const char access::object_traits_impl< ::machineinfo, id_pgsql >::
  query_statement_name[] = "query_machineinfo";

  const char access::object_traits_impl< ::machineinfo, id_pgsql >::
  erase_query_statement_name[] = "erase_query_machineinfo";

  const unsigned int access::object_traits_impl< ::machineinfo, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::machineinfo, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::machineinfo, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::float4_oid,
    pgsql::float4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::int4_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::machineinfo, id_pgsql >::extra_statement_cache_type
  {
    extra_statement_cache_type (
      pgsql::connection&,
      image_type&,
      id_image_type&,
      pgsql::binding&,
      pgsql::binding&,
      pgsql::native_binding&,
      const unsigned int*)
    {
    }
  };

  access::object_traits_impl< ::machineinfo, id_pgsql >::id_type
  access::object_traits_impl< ::machineinfo, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::machineinfo, id_pgsql >::id_type
  access::object_traits_impl< ::machineinfo, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::machineinfo, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // memory
    //
    if (composite_value_traits< ::Memory, id_pgsql >::grow (
          i.memory_value, t + 1UL))
      grew = true;

    // cpu
    //
    if (composite_value_traits< ::CPU, id_pgsql >::grow (
          i.cpu_value, t + 4UL))
      grew = true;

    // process
    //
    if (composite_value_traits< ::Process, id_pgsql >::grow (
          i.process_value, t + 6UL))
      grew = true;

    // system_info
    //
    if (composite_value_traits< ::SystemInfo, id_pgsql >::grow (
          i.system_info_value, t + 9UL))
      grew = true;

    return grew;
  }

  void access::object_traits_impl< ::machineinfo, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // memory
    //
    composite_value_traits< ::Memory, id_pgsql >::bind (
      b + n, i.memory_value, sk);
    n += 3UL;

    // cpu
    //
    composite_value_traits< ::CPU, id_pgsql >::bind (
      b + n, i.cpu_value, sk);
    n += 2UL;

    // process
    //
    composite_value_traits< ::Process, id_pgsql >::bind (
      b + n, i.process_value, sk);
    n += 3UL;

    // system_info
    //
    composite_value_traits< ::SystemInfo, id_pgsql >::bind (
      b + n, i.system_info_value, sk);
    n += 2UL;
  }

  void access::object_traits_impl< ::machineinfo, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::machineinfo, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // memory
    //
    {
      ::std::shared_ptr< ::Memory > const& v =
        o.memory;

      composite_value_traits< ::Memory, id_pgsql >::init (
        i.memory_value,
        wrapper_traits< ::std::shared_ptr< ::Memory > >::get_ref (v),
        sk);
    }

    // cpu
    //
    {
      ::std::shared_ptr< ::CPU > const& v =
        o.cpu;

      composite_value_traits< ::CPU, id_pgsql >::init (
        i.cpu_value,
        wrapper_traits< ::std::shared_ptr< ::CPU > >::get_ref (v),
        sk);
    }

    // process
    //
    {
      ::std::shared_ptr< ::Process > const& v =
        o.process;

      composite_value_traits< ::Process, id_pgsql >::init (
        i.process_value,
        wrapper_traits< ::std::shared_ptr< ::Process > >::get_ref (v),
        sk);
    }

    // system_info
    //
    {
      ::std::shared_ptr< ::SystemInfo > const& v =
        o.system_info;

      if (composite_value_traits< ::SystemInfo, id_pgsql >::init (
            i.system_info_value,
            wrapper_traits< ::std::shared_ptr< ::SystemInfo > >::get_ref (v),
            sk))
        grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::machineinfo, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // memory
    //
    {
      ::std::shared_ptr< ::Memory >& v =
        o.memory;

      composite_value_traits< ::Memory, id_pgsql >::init (
        wrapper_traits< ::std::shared_ptr< ::Memory > >::set_ref (v),
        i.memory_value,
        db);
    }

    // cpu
    //
    {
      ::std::shared_ptr< ::CPU >& v =
        o.cpu;

      composite_value_traits< ::CPU, id_pgsql >::init (
        wrapper_traits< ::std::shared_ptr< ::CPU > >::set_ref (v),
        i.cpu_value,
        db);
    }

    // process
    //
    {
      ::std::shared_ptr< ::Process >& v =
        o.process;

      composite_value_traits< ::Process, id_pgsql >::init (
        wrapper_traits< ::std::shared_ptr< ::Process > >::set_ref (v),
        i.process_value,
        db);
    }

    // system_info
    //
    {
      ::std::shared_ptr< ::SystemInfo >& v =
        o.system_info;

      composite_value_traits< ::SystemInfo, id_pgsql >::init (
        wrapper_traits< ::std::shared_ptr< ::SystemInfo > >::set_ref (v),
        i.system_info_value,
        db);
    }
  }

  void access::object_traits_impl< ::machineinfo, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::machineinfo, id_pgsql >::persist_statement[] =
  "INSERT INTO \"machineinfo\" "
  "(\"id\", "
  "\"memory_mem_total\", "
  "\"memory_mem_available\", "
  "\"memory_mem_free\", "
  "\"cpu_idle_time\", "
  "\"cpu_use_time\", "
  "\"process_total\", "
  "\"process_running\", "
  "\"process_blocked\", "
  "\"system_info_system_ip\", "
  "\"system_info_system_name\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::machineinfo, id_pgsql >::find_statement[] =
  "SELECT "
  "\"machineinfo\".\"id\", "
  "\"machineinfo\".\"memory_mem_total\", "
  "\"machineinfo\".\"memory_mem_available\", "
  "\"machineinfo\".\"memory_mem_free\", "
  "\"machineinfo\".\"cpu_idle_time\", "
  "\"machineinfo\".\"cpu_use_time\", "
  "\"machineinfo\".\"process_total\", "
  "\"machineinfo\".\"process_running\", "
  "\"machineinfo\".\"process_blocked\", "
  "\"machineinfo\".\"system_info_system_ip\", "
  "\"machineinfo\".\"system_info_system_name\" "
  "FROM \"machineinfo\" "
  "WHERE \"machineinfo\".\"id\"=$1";

  const char access::object_traits_impl< ::machineinfo, id_pgsql >::update_statement[] =
  "UPDATE \"machineinfo\" "
  "SET "
  "\"memory_mem_total\"=$1, "
  "\"memory_mem_available\"=$2, "
  "\"memory_mem_free\"=$3, "
  "\"cpu_idle_time\"=$4, "
  "\"cpu_use_time\"=$5, "
  "\"process_total\"=$6, "
  "\"process_running\"=$7, "
  "\"process_blocked\"=$8, "
  "\"system_info_system_ip\"=$9, "
  "\"system_info_system_name\"=$10 "
  "WHERE \"id\"=$11";

  const char access::object_traits_impl< ::machineinfo, id_pgsql >::erase_statement[] =
  "DELETE FROM \"machineinfo\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::machineinfo, id_pgsql >::query_statement[] =
  "SELECT "
  "\"machineinfo\".\"id\", "
  "\"machineinfo\".\"memory_mem_total\", "
  "\"machineinfo\".\"memory_mem_available\", "
  "\"machineinfo\".\"memory_mem_free\", "
  "\"machineinfo\".\"cpu_idle_time\", "
  "\"machineinfo\".\"cpu_use_time\", "
  "\"machineinfo\".\"process_total\", "
  "\"machineinfo\".\"process_running\", "
  "\"machineinfo\".\"process_blocked\", "
  "\"machineinfo\".\"system_info_system_ip\", "
  "\"machineinfo\".\"system_info_system_name\" "
  "FROM \"machineinfo\"";

  const char access::object_traits_impl< ::machineinfo, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"machineinfo\"";

  const char access::object_traits_impl< ::machineinfo, id_pgsql >::table_name[] =
  "\"machineinfo\"";

  void access::object_traits_impl< ::machineinfo, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::machineinfo, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::machineinfo, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::machineinfo, id_pgsql >::pointer_type
  access::object_traits_impl< ::machineinfo, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::machineinfo, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::machineinfo, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::machineinfo, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  result< access::object_traits_impl< ::machineinfo, id_pgsql >::object_type >
  access::object_traits_impl< ::machineinfo, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::machineinfo, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>

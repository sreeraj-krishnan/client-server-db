// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machine.proto

#include "machine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace machine {
class Machine_MemoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Machine_Memory>
      _instance;
} _Machine_Memory_default_instance_;
class Machine_CPUDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Machine_CPU>
      _instance;
} _Machine_CPU_default_instance_;
class Machine_ProcessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Machine_Process>
      _instance;
} _Machine_Process_default_instance_;
class Machine_SystemInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Machine_SystemInfo>
      _instance;
} _Machine_SystemInfo_default_instance_;
class MachineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Machine>
      _instance;
} _Machine_default_instance_;
class MachineInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MachineInfo>
      _instance;
} _MachineInfo_default_instance_;
}  // namespace machine
namespace protobuf_machine_2eproto {
void InitDefaultsMachine_MemoryImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::machine::_Machine_Memory_default_instance_;
    new (ptr) ::machine::Machine_Memory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::machine::Machine_Memory::InitAsDefaultInstance();
}

void InitDefaultsMachine_Memory() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMachine_MemoryImpl);
}

void InitDefaultsMachine_CPUImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::machine::_Machine_CPU_default_instance_;
    new (ptr) ::machine::Machine_CPU();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::machine::Machine_CPU::InitAsDefaultInstance();
}

void InitDefaultsMachine_CPU() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMachine_CPUImpl);
}

void InitDefaultsMachine_ProcessImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::machine::_Machine_Process_default_instance_;
    new (ptr) ::machine::Machine_Process();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::machine::Machine_Process::InitAsDefaultInstance();
}

void InitDefaultsMachine_Process() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMachine_ProcessImpl);
}

void InitDefaultsMachine_SystemInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::machine::_Machine_SystemInfo_default_instance_;
    new (ptr) ::machine::Machine_SystemInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::machine::Machine_SystemInfo::InitAsDefaultInstance();
}

void InitDefaultsMachine_SystemInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMachine_SystemInfoImpl);
}

void InitDefaultsMachineImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_machine_2eproto::InitDefaultsMachine_Memory();
  protobuf_machine_2eproto::InitDefaultsMachine_CPU();
  protobuf_machine_2eproto::InitDefaultsMachine_Process();
  protobuf_machine_2eproto::InitDefaultsMachine_SystemInfo();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::machine::_Machine_default_instance_;
    new (ptr) ::machine::Machine();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::machine::Machine::InitAsDefaultInstance();
}

void InitDefaultsMachine() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMachineImpl);
}

void InitDefaultsMachineInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_machine_2eproto::InitDefaultsMachine();
  {
    void* ptr = &::machine::_MachineInfo_default_instance_;
    new (ptr) ::machine::MachineInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::machine::MachineInfo::InitAsDefaultInstance();
}

void InitDefaultsMachineInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMachineInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine_Memory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine_Memory, mem_total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine_Memory, mem_available_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine_Memory, mem_free_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine_CPU, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine_CPU, idle_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine_CPU, use_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine_Process, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine_Process, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine_Process, running_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine_Process, blocked_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine_SystemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine_SystemInfo, system_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine_SystemInfo, system_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine, memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine, cpu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine, process_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine, systeminfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::Machine, last_updated_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::MachineInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::machine::MachineInfo, machine_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::machine::Machine_Memory)},
  { 8, -1, sizeof(::machine::Machine_CPU)},
  { 15, -1, sizeof(::machine::Machine_Process)},
  { 23, -1, sizeof(::machine::Machine_SystemInfo)},
  { 30, -1, sizeof(::machine::Machine)},
  { 40, -1, sizeof(::machine::MachineInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::machine::_Machine_Memory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::machine::_Machine_CPU_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::machine::_Machine_Process_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::machine::_Machine_SystemInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::machine::_Machine_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::machine::_MachineInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "machine.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rmachine.proto\022\007machine\032\037google/protobu"
      "f/timestamp.proto\"\307\003\n\007Machine\022\'\n\006memory\030"
      "\006 \001(\0132\027.machine.Machine.Memory\022!\n\003cpu\030\007 "
      "\001(\0132\024.machine.Machine.CPU\022)\n\007process\030\010 \001"
      "(\0132\030.machine.Machine.Process\022/\n\nsystemin"
      "fo\030\t \001(\0132\033.machine.Machine.SystemInfo\0220\n"
      "\014last_updated\030\005 \001(\0132\032.google.protobuf.Ti"
      "mestamp\032D\n\006Memory\022\021\n\tmem_total\030\001 \001(\005\022\025\n\r"
      "mem_available\030\002 \001(\005\022\020\n\010mem_free\030\003 \001(\005\032*\n"
      "\003CPU\022\021\n\tidle_time\030\001 \001(\002\022\020\n\010use_time\030\002 \001("
      "\002\032:\n\007Process\022\r\n\005total\030\001 \001(\005\022\017\n\007running\030\002"
      " \001(\005\022\017\n\007blocked\030\003 \001(\005\0324\n\nSystemInfo\022\021\n\ts"
      "ystem_ip\030\001 \001(\t\022\023\n\013system_name\030\002 \001(\t\"0\n\013M"
      "achineInfo\022!\n\007machine\030\001 \001(\0132\020.machine.Ma"
      "chineb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 573);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "machine.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_machine_2eproto
namespace machine {

// ===================================================================

void Machine_Memory::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Machine_Memory::kMemTotalFieldNumber;
const int Machine_Memory::kMemAvailableFieldNumber;
const int Machine_Memory::kMemFreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Machine_Memory::Machine_Memory()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_machine_2eproto::InitDefaultsMachine_Memory();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.Machine.Memory)
}
Machine_Memory::Machine_Memory(const Machine_Memory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mem_total_, &from.mem_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&mem_free_) -
    reinterpret_cast<char*>(&mem_total_)) + sizeof(mem_free_));
  // @@protoc_insertion_point(copy_constructor:machine.Machine.Memory)
}

void Machine_Memory::SharedCtor() {
  ::memset(&mem_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_free_) -
      reinterpret_cast<char*>(&mem_total_)) + sizeof(mem_free_));
  _cached_size_ = 0;
}

Machine_Memory::~Machine_Memory() {
  // @@protoc_insertion_point(destructor:machine.Machine.Memory)
  SharedDtor();
}

void Machine_Memory::SharedDtor() {
}

void Machine_Memory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Machine_Memory::descriptor() {
  ::protobuf_machine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_machine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Machine_Memory& Machine_Memory::default_instance() {
  ::protobuf_machine_2eproto::InitDefaultsMachine_Memory();
  return *internal_default_instance();
}

Machine_Memory* Machine_Memory::New(::google::protobuf::Arena* arena) const {
  Machine_Memory* n = new Machine_Memory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Machine_Memory::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.Machine.Memory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&mem_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mem_free_) -
      reinterpret_cast<char*>(&mem_total_)) + sizeof(mem_free_));
  _internal_metadata_.Clear();
}

bool Machine_Memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.Machine.Memory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 mem_total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mem_available = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mem_free = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.Machine.Memory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.Machine.Memory)
  return false;
#undef DO_
}

void Machine_Memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.Machine.Memory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mem_total = 1;
  if (this->mem_total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mem_total(), output);
  }

  // int32 mem_available = 2;
  if (this->mem_available() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mem_available(), output);
  }

  // int32 mem_free = 3;
  if (this->mem_free() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mem_free(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.Machine.Memory)
}

::google::protobuf::uint8* Machine_Memory::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:machine.Machine.Memory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 mem_total = 1;
  if (this->mem_total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mem_total(), target);
  }

  // int32 mem_available = 2;
  if (this->mem_available() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mem_available(), target);
  }

  // int32 mem_free = 3;
  if (this->mem_free() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mem_free(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.Machine.Memory)
  return target;
}

size_t Machine_Memory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.Machine.Memory)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 mem_total = 1;
  if (this->mem_total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mem_total());
  }

  // int32 mem_available = 2;
  if (this->mem_available() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mem_available());
  }

  // int32 mem_free = 3;
  if (this->mem_free() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mem_free());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Machine_Memory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:machine.Machine.Memory)
  GOOGLE_DCHECK_NE(&from, this);
  const Machine_Memory* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Machine_Memory>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:machine.Machine.Memory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:machine.Machine.Memory)
    MergeFrom(*source);
  }
}

void Machine_Memory::MergeFrom(const Machine_Memory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.Machine.Memory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.mem_total() != 0) {
    set_mem_total(from.mem_total());
  }
  if (from.mem_available() != 0) {
    set_mem_available(from.mem_available());
  }
  if (from.mem_free() != 0) {
    set_mem_free(from.mem_free());
  }
}

void Machine_Memory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:machine.Machine.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Machine_Memory::CopyFrom(const Machine_Memory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.Machine.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Machine_Memory::IsInitialized() const {
  return true;
}

void Machine_Memory::Swap(Machine_Memory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Machine_Memory::InternalSwap(Machine_Memory* other) {
  using std::swap;
  swap(mem_total_, other->mem_total_);
  swap(mem_available_, other->mem_available_);
  swap(mem_free_, other->mem_free_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Machine_Memory::GetMetadata() const {
  protobuf_machine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_machine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Machine_CPU::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Machine_CPU::kIdleTimeFieldNumber;
const int Machine_CPU::kUseTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Machine_CPU::Machine_CPU()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_machine_2eproto::InitDefaultsMachine_CPU();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.Machine.CPU)
}
Machine_CPU::Machine_CPU(const Machine_CPU& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&idle_time_, &from.idle_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_time_) -
    reinterpret_cast<char*>(&idle_time_)) + sizeof(use_time_));
  // @@protoc_insertion_point(copy_constructor:machine.Machine.CPU)
}

void Machine_CPU::SharedCtor() {
  ::memset(&idle_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_time_) -
      reinterpret_cast<char*>(&idle_time_)) + sizeof(use_time_));
  _cached_size_ = 0;
}

Machine_CPU::~Machine_CPU() {
  // @@protoc_insertion_point(destructor:machine.Machine.CPU)
  SharedDtor();
}

void Machine_CPU::SharedDtor() {
}

void Machine_CPU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Machine_CPU::descriptor() {
  ::protobuf_machine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_machine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Machine_CPU& Machine_CPU::default_instance() {
  ::protobuf_machine_2eproto::InitDefaultsMachine_CPU();
  return *internal_default_instance();
}

Machine_CPU* Machine_CPU::New(::google::protobuf::Arena* arena) const {
  Machine_CPU* n = new Machine_CPU;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Machine_CPU::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.Machine.CPU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&idle_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_time_) -
      reinterpret_cast<char*>(&idle_time_)) + sizeof(use_time_));
  _internal_metadata_.Clear();
}

bool Machine_CPU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.Machine.CPU)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float idle_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &idle_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float use_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &use_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.Machine.CPU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.Machine.CPU)
  return false;
#undef DO_
}

void Machine_CPU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.Machine.CPU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float idle_time = 1;
  if (this->idle_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->idle_time(), output);
  }

  // float use_time = 2;
  if (this->use_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->use_time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.Machine.CPU)
}

::google::protobuf::uint8* Machine_CPU::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:machine.Machine.CPU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float idle_time = 1;
  if (this->idle_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->idle_time(), target);
  }

  // float use_time = 2;
  if (this->use_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->use_time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.Machine.CPU)
  return target;
}

size_t Machine_CPU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.Machine.CPU)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float idle_time = 1;
  if (this->idle_time() != 0) {
    total_size += 1 + 4;
  }

  // float use_time = 2;
  if (this->use_time() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Machine_CPU::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:machine.Machine.CPU)
  GOOGLE_DCHECK_NE(&from, this);
  const Machine_CPU* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Machine_CPU>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:machine.Machine.CPU)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:machine.Machine.CPU)
    MergeFrom(*source);
  }
}

void Machine_CPU::MergeFrom(const Machine_CPU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.Machine.CPU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.idle_time() != 0) {
    set_idle_time(from.idle_time());
  }
  if (from.use_time() != 0) {
    set_use_time(from.use_time());
  }
}

void Machine_CPU::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:machine.Machine.CPU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Machine_CPU::CopyFrom(const Machine_CPU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.Machine.CPU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Machine_CPU::IsInitialized() const {
  return true;
}

void Machine_CPU::Swap(Machine_CPU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Machine_CPU::InternalSwap(Machine_CPU* other) {
  using std::swap;
  swap(idle_time_, other->idle_time_);
  swap(use_time_, other->use_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Machine_CPU::GetMetadata() const {
  protobuf_machine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_machine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Machine_Process::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Machine_Process::kTotalFieldNumber;
const int Machine_Process::kRunningFieldNumber;
const int Machine_Process::kBlockedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Machine_Process::Machine_Process()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_machine_2eproto::InitDefaultsMachine_Process();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.Machine.Process)
}
Machine_Process::Machine_Process(const Machine_Process& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_, &from.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&blocked_) -
    reinterpret_cast<char*>(&total_)) + sizeof(blocked_));
  // @@protoc_insertion_point(copy_constructor:machine.Machine.Process)
}

void Machine_Process::SharedCtor() {
  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocked_) -
      reinterpret_cast<char*>(&total_)) + sizeof(blocked_));
  _cached_size_ = 0;
}

Machine_Process::~Machine_Process() {
  // @@protoc_insertion_point(destructor:machine.Machine.Process)
  SharedDtor();
}

void Machine_Process::SharedDtor() {
}

void Machine_Process::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Machine_Process::descriptor() {
  ::protobuf_machine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_machine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Machine_Process& Machine_Process::default_instance() {
  ::protobuf_machine_2eproto::InitDefaultsMachine_Process();
  return *internal_default_instance();
}

Machine_Process* Machine_Process::New(::google::protobuf::Arena* arena) const {
  Machine_Process* n = new Machine_Process;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Machine_Process::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.Machine.Process)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blocked_) -
      reinterpret_cast<char*>(&total_)) + sizeof(blocked_));
  _internal_metadata_.Clear();
}

bool Machine_Process::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.Machine.Process)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 total = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 running = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &running_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 blocked = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blocked_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.Machine.Process)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.Machine.Process)
  return false;
#undef DO_
}

void Machine_Process::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.Machine.Process)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total = 1;
  if (this->total() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->total(), output);
  }

  // int32 running = 2;
  if (this->running() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->running(), output);
  }

  // int32 blocked = 3;
  if (this->blocked() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blocked(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.Machine.Process)
}

::google::protobuf::uint8* Machine_Process::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:machine.Machine.Process)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total = 1;
  if (this->total() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->total(), target);
  }

  // int32 running = 2;
  if (this->running() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->running(), target);
  }

  // int32 blocked = 3;
  if (this->blocked() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blocked(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.Machine.Process)
  return target;
}

size_t Machine_Process::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.Machine.Process)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 total = 1;
  if (this->total() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total());
  }

  // int32 running = 2;
  if (this->running() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->running());
  }

  // int32 blocked = 3;
  if (this->blocked() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->blocked());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Machine_Process::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:machine.Machine.Process)
  GOOGLE_DCHECK_NE(&from, this);
  const Machine_Process* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Machine_Process>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:machine.Machine.Process)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:machine.Machine.Process)
    MergeFrom(*source);
  }
}

void Machine_Process::MergeFrom(const Machine_Process& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.Machine.Process)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.total() != 0) {
    set_total(from.total());
  }
  if (from.running() != 0) {
    set_running(from.running());
  }
  if (from.blocked() != 0) {
    set_blocked(from.blocked());
  }
}

void Machine_Process::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:machine.Machine.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Machine_Process::CopyFrom(const Machine_Process& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.Machine.Process)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Machine_Process::IsInitialized() const {
  return true;
}

void Machine_Process::Swap(Machine_Process* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Machine_Process::InternalSwap(Machine_Process* other) {
  using std::swap;
  swap(total_, other->total_);
  swap(running_, other->running_);
  swap(blocked_, other->blocked_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Machine_Process::GetMetadata() const {
  protobuf_machine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_machine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Machine_SystemInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Machine_SystemInfo::kSystemIpFieldNumber;
const int Machine_SystemInfo::kSystemNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Machine_SystemInfo::Machine_SystemInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_machine_2eproto::InitDefaultsMachine_SystemInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.Machine.SystemInfo)
}
Machine_SystemInfo::Machine_SystemInfo(const Machine_SystemInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  system_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.system_ip().size() > 0) {
    system_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_ip_);
  }
  system_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.system_name().size() > 0) {
    system_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_name_);
  }
  // @@protoc_insertion_point(copy_constructor:machine.Machine.SystemInfo)
}

void Machine_SystemInfo::SharedCtor() {
  system_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Machine_SystemInfo::~Machine_SystemInfo() {
  // @@protoc_insertion_point(destructor:machine.Machine.SystemInfo)
  SharedDtor();
}

void Machine_SystemInfo::SharedDtor() {
  system_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Machine_SystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Machine_SystemInfo::descriptor() {
  ::protobuf_machine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_machine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Machine_SystemInfo& Machine_SystemInfo::default_instance() {
  ::protobuf_machine_2eproto::InitDefaultsMachine_SystemInfo();
  return *internal_default_instance();
}

Machine_SystemInfo* Machine_SystemInfo::New(::google::protobuf::Arena* arena) const {
  Machine_SystemInfo* n = new Machine_SystemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Machine_SystemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.Machine.SystemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  system_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  system_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Machine_SystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.Machine.SystemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string system_ip = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->system_ip().data(), static_cast<int>(this->system_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "machine.Machine.SystemInfo.system_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string system_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_system_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->system_name().data(), static_cast<int>(this->system_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "machine.Machine.SystemInfo.system_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.Machine.SystemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.Machine.SystemInfo)
  return false;
#undef DO_
}

void Machine_SystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.Machine.SystemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system_ip = 1;
  if (this->system_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_ip().data(), static_cast<int>(this->system_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "machine.Machine.SystemInfo.system_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->system_ip(), output);
  }

  // string system_name = 2;
  if (this->system_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_name().data(), static_cast<int>(this->system_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "machine.Machine.SystemInfo.system_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->system_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.Machine.SystemInfo)
}

::google::protobuf::uint8* Machine_SystemInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:machine.Machine.SystemInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string system_ip = 1;
  if (this->system_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_ip().data(), static_cast<int>(this->system_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "machine.Machine.SystemInfo.system_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->system_ip(), target);
  }

  // string system_name = 2;
  if (this->system_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->system_name().data(), static_cast<int>(this->system_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "machine.Machine.SystemInfo.system_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->system_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.Machine.SystemInfo)
  return target;
}

size_t Machine_SystemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.Machine.SystemInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string system_ip = 1;
  if (this->system_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system_ip());
  }

  // string system_name = 2;
  if (this->system_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->system_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Machine_SystemInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:machine.Machine.SystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const Machine_SystemInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Machine_SystemInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:machine.Machine.SystemInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:machine.Machine.SystemInfo)
    MergeFrom(*source);
  }
}

void Machine_SystemInfo::MergeFrom(const Machine_SystemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.Machine.SystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.system_ip().size() > 0) {

    system_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_ip_);
  }
  if (from.system_name().size() > 0) {

    system_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.system_name_);
  }
}

void Machine_SystemInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:machine.Machine.SystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Machine_SystemInfo::CopyFrom(const Machine_SystemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.Machine.SystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Machine_SystemInfo::IsInitialized() const {
  return true;
}

void Machine_SystemInfo::Swap(Machine_SystemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Machine_SystemInfo::InternalSwap(Machine_SystemInfo* other) {
  using std::swap;
  system_ip_.Swap(&other->system_ip_);
  system_name_.Swap(&other->system_name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Machine_SystemInfo::GetMetadata() const {
  protobuf_machine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_machine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Machine::InitAsDefaultInstance() {
  ::machine::_Machine_default_instance_._instance.get_mutable()->memory_ = const_cast< ::machine::Machine_Memory*>(
      ::machine::Machine_Memory::internal_default_instance());
  ::machine::_Machine_default_instance_._instance.get_mutable()->cpu_ = const_cast< ::machine::Machine_CPU*>(
      ::machine::Machine_CPU::internal_default_instance());
  ::machine::_Machine_default_instance_._instance.get_mutable()->process_ = const_cast< ::machine::Machine_Process*>(
      ::machine::Machine_Process::internal_default_instance());
  ::machine::_Machine_default_instance_._instance.get_mutable()->systeminfo_ = const_cast< ::machine::Machine_SystemInfo*>(
      ::machine::Machine_SystemInfo::internal_default_instance());
  ::machine::_Machine_default_instance_._instance.get_mutable()->last_updated_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Machine::clear_last_updated() {
  if (GetArenaNoVirtual() == NULL && last_updated_ != NULL) {
    delete last_updated_;
  }
  last_updated_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Machine::kMemoryFieldNumber;
const int Machine::kCpuFieldNumber;
const int Machine::kProcessFieldNumber;
const int Machine::kSysteminfoFieldNumber;
const int Machine::kLastUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Machine::Machine()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_machine_2eproto::InitDefaultsMachine();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.Machine)
}
Machine::Machine(const Machine& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_last_updated()) {
    last_updated_ = new ::google::protobuf::Timestamp(*from.last_updated_);
  } else {
    last_updated_ = NULL;
  }
  if (from.has_memory()) {
    memory_ = new ::machine::Machine_Memory(*from.memory_);
  } else {
    memory_ = NULL;
  }
  if (from.has_cpu()) {
    cpu_ = new ::machine::Machine_CPU(*from.cpu_);
  } else {
    cpu_ = NULL;
  }
  if (from.has_process()) {
    process_ = new ::machine::Machine_Process(*from.process_);
  } else {
    process_ = NULL;
  }
  if (from.has_systeminfo()) {
    systeminfo_ = new ::machine::Machine_SystemInfo(*from.systeminfo_);
  } else {
    systeminfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:machine.Machine)
}

void Machine::SharedCtor() {
  ::memset(&last_updated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&systeminfo_) -
      reinterpret_cast<char*>(&last_updated_)) + sizeof(systeminfo_));
  _cached_size_ = 0;
}

Machine::~Machine() {
  // @@protoc_insertion_point(destructor:machine.Machine)
  SharedDtor();
}

void Machine::SharedDtor() {
  if (this != internal_default_instance()) delete last_updated_;
  if (this != internal_default_instance()) delete memory_;
  if (this != internal_default_instance()) delete cpu_;
  if (this != internal_default_instance()) delete process_;
  if (this != internal_default_instance()) delete systeminfo_;
}

void Machine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Machine::descriptor() {
  ::protobuf_machine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_machine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Machine& Machine::default_instance() {
  ::protobuf_machine_2eproto::InitDefaultsMachine();
  return *internal_default_instance();
}

Machine* Machine::New(::google::protobuf::Arena* arena) const {
  Machine* n = new Machine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Machine::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.Machine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && last_updated_ != NULL) {
    delete last_updated_;
  }
  last_updated_ = NULL;
  if (GetArenaNoVirtual() == NULL && memory_ != NULL) {
    delete memory_;
  }
  memory_ = NULL;
  if (GetArenaNoVirtual() == NULL && cpu_ != NULL) {
    delete cpu_;
  }
  cpu_ = NULL;
  if (GetArenaNoVirtual() == NULL && process_ != NULL) {
    delete process_;
  }
  process_ = NULL;
  if (GetArenaNoVirtual() == NULL && systeminfo_ != NULL) {
    delete systeminfo_;
  }
  systeminfo_ = NULL;
  _internal_metadata_.Clear();
}

bool Machine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.Machine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp last_updated = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_last_updated()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .machine.Machine.Memory memory = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_memory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .machine.Machine.CPU cpu = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cpu()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .machine.Machine.Process process = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_process()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .machine.Machine.SystemInfo systeminfo = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_systeminfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.Machine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.Machine)
  return false;
#undef DO_
}

void Machine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.Machine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp last_updated = 5;
  if (this->has_last_updated()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->last_updated_, output);
  }

  // .machine.Machine.Memory memory = 6;
  if (this->has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->memory_, output);
  }

  // .machine.Machine.CPU cpu = 7;
  if (this->has_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->cpu_, output);
  }

  // .machine.Machine.Process process = 8;
  if (this->has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->process_, output);
  }

  // .machine.Machine.SystemInfo systeminfo = 9;
  if (this->has_systeminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->systeminfo_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.Machine)
}

::google::protobuf::uint8* Machine::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:machine.Machine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp last_updated = 5;
  if (this->has_last_updated()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->last_updated_, deterministic, target);
  }

  // .machine.Machine.Memory memory = 6;
  if (this->has_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->memory_, deterministic, target);
  }

  // .machine.Machine.CPU cpu = 7;
  if (this->has_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->cpu_, deterministic, target);
  }

  // .machine.Machine.Process process = 8;
  if (this->has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->process_, deterministic, target);
  }

  // .machine.Machine.SystemInfo systeminfo = 9;
  if (this->has_systeminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, *this->systeminfo_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.Machine)
  return target;
}

size_t Machine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.Machine)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Timestamp last_updated = 5;
  if (this->has_last_updated()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->last_updated_);
  }

  // .machine.Machine.Memory memory = 6;
  if (this->has_memory()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->memory_);
  }

  // .machine.Machine.CPU cpu = 7;
  if (this->has_cpu()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->cpu_);
  }

  // .machine.Machine.Process process = 8;
  if (this->has_process()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->process_);
  }

  // .machine.Machine.SystemInfo systeminfo = 9;
  if (this->has_systeminfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->systeminfo_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Machine::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:machine.Machine)
  GOOGLE_DCHECK_NE(&from, this);
  const Machine* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Machine>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:machine.Machine)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:machine.Machine)
    MergeFrom(*source);
  }
}

void Machine::MergeFrom(const Machine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.Machine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_last_updated()) {
    mutable_last_updated()->::google::protobuf::Timestamp::MergeFrom(from.last_updated());
  }
  if (from.has_memory()) {
    mutable_memory()->::machine::Machine_Memory::MergeFrom(from.memory());
  }
  if (from.has_cpu()) {
    mutable_cpu()->::machine::Machine_CPU::MergeFrom(from.cpu());
  }
  if (from.has_process()) {
    mutable_process()->::machine::Machine_Process::MergeFrom(from.process());
  }
  if (from.has_systeminfo()) {
    mutable_systeminfo()->::machine::Machine_SystemInfo::MergeFrom(from.systeminfo());
  }
}

void Machine::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:machine.Machine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Machine::CopyFrom(const Machine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.Machine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Machine::IsInitialized() const {
  return true;
}

void Machine::Swap(Machine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Machine::InternalSwap(Machine* other) {
  using std::swap;
  swap(last_updated_, other->last_updated_);
  swap(memory_, other->memory_);
  swap(cpu_, other->cpu_);
  swap(process_, other->process_);
  swap(systeminfo_, other->systeminfo_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Machine::GetMetadata() const {
  protobuf_machine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_machine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MachineInfo::InitAsDefaultInstance() {
  ::machine::_MachineInfo_default_instance_._instance.get_mutable()->machine_ = const_cast< ::machine::Machine*>(
      ::machine::Machine::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MachineInfo::kMachineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MachineInfo::MachineInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_machine_2eproto::InitDefaultsMachineInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:machine.MachineInfo)
}
MachineInfo::MachineInfo(const MachineInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_machine()) {
    machine_ = new ::machine::Machine(*from.machine_);
  } else {
    machine_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:machine.MachineInfo)
}

void MachineInfo::SharedCtor() {
  machine_ = NULL;
  _cached_size_ = 0;
}

MachineInfo::~MachineInfo() {
  // @@protoc_insertion_point(destructor:machine.MachineInfo)
  SharedDtor();
}

void MachineInfo::SharedDtor() {
  if (this != internal_default_instance()) delete machine_;
}

void MachineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineInfo::descriptor() {
  ::protobuf_machine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_machine_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MachineInfo& MachineInfo::default_instance() {
  ::protobuf_machine_2eproto::InitDefaultsMachineInfo();
  return *internal_default_instance();
}

MachineInfo* MachineInfo::New(::google::protobuf::Arena* arena) const {
  MachineInfo* n = new MachineInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MachineInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:machine.MachineInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && machine_ != NULL) {
    delete machine_;
  }
  machine_ = NULL;
  _internal_metadata_.Clear();
}

bool MachineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:machine.MachineInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .machine.Machine machine = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_machine()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:machine.MachineInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:machine.MachineInfo)
  return false;
#undef DO_
}

void MachineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:machine.MachineInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .machine.Machine machine = 1;
  if (this->has_machine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->machine_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:machine.MachineInfo)
}

::google::protobuf::uint8* MachineInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:machine.MachineInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .machine.Machine machine = 1;
  if (this->has_machine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->machine_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:machine.MachineInfo)
  return target;
}

size_t MachineInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:machine.MachineInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .machine.Machine machine = 1;
  if (this->has_machine()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->machine_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:machine.MachineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MachineInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MachineInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:machine.MachineInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:machine.MachineInfo)
    MergeFrom(*source);
  }
}

void MachineInfo::MergeFrom(const MachineInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:machine.MachineInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_machine()) {
    mutable_machine()->::machine::Machine::MergeFrom(from.machine());
  }
}

void MachineInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:machine.MachineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineInfo::CopyFrom(const MachineInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:machine.MachineInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineInfo::IsInitialized() const {
  return true;
}

void MachineInfo::Swap(MachineInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MachineInfo::InternalSwap(MachineInfo* other) {
  using std::swap;
  swap(machine_, other->machine_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MachineInfo::GetMetadata() const {
  protobuf_machine_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_machine_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace machine

// @@protoc_insertion_point(global_scope)

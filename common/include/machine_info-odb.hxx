// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef MACHINE_INFO_ODB_HXX
#define MACHINE_INFO_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "machine_info.hxx"

#include <memory>
#include <cstddef>
#include <utility>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // machineinfo
  //
  template <>
  struct class_traits< ::machineinfo >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::machineinfo >
  {
    public:
    typedef ::machineinfo object_type;
    typedef ::machineinfo* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef long unsigned int id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/pgsql/version.hxx>
#include <odb/pgsql/forward.hxx>
#include <odb/pgsql/binding.hxx>
#include <odb/pgsql/pgsql-types.hxx>
#include <odb/pgsql/query.hxx>

namespace odb
{
  // Memory
  //
  template <>
  class access::composite_value_traits< ::Memory, id_pgsql >
  {
    public:
    typedef ::Memory value_type;

    struct image_type
    {
      // mem_total
      //
      int mem_total_value;
      bool mem_total_null;

      // mem_available
      //
      int mem_available_value;
      bool mem_available_null;

      // mem_free
      //
      int mem_free_value;
      bool mem_free_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 3UL;
  };

  // CPU
  //
  template <>
  class access::composite_value_traits< ::CPU, id_pgsql >
  {
    public:
    typedef ::CPU value_type;

    struct image_type
    {
      // idle_time
      //
      float idle_time_value;
      bool idle_time_null;

      // use_time
      //
      float use_time_value;
      bool use_time_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // Process
  //
  template <>
  class access::composite_value_traits< ::Process, id_pgsql >
  {
    public:
    typedef ::Process value_type;

    struct image_type
    {
      // total
      //
      int total_value;
      bool total_null;

      // running
      //
      int running_value;
      bool running_null;

      // blocked
      //
      int blocked_value;
      bool blocked_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 3UL;
  };

  // SystemInfo
  //
  template <>
  class access::composite_value_traits< ::SystemInfo, id_pgsql >
  {
    public:
    typedef ::SystemInfo value_type;

    struct image_type
    {
      // system_ip
      //
      details::buffer system_ip_value;
      std::size_t system_ip_size;
      bool system_ip_null;

      // system_name
      //
      details::buffer system_name_value;
      std::size_t system_name_size;
      bool system_name_null;
    };

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static bool
    init (image_type&,
          const value_type&,
          pgsql::statement_kind);

    static void
    init (value_type&,
          const image_type&,
          database*);

    static bool
    get_null (const image_type&);

    static void
    set_null (image_type&,
              pgsql::statement_kind);

    static const std::size_t column_count = 2UL;
  };

  // machineinfo
  //
  template <typename A>
  struct query_columns< ::machineinfo, id_pgsql, A >
  {
    // id
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long unsigned int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    id_type_;

    static const id_type_ id;

    // client_key
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        ::std::string,
        pgsql::id_string >::query_type,
      pgsql::id_string >
    client_key_type_;

    static const client_key_type_ client_key;

    // memory
    //
    struct memory_class_
    {
      memory_class_ ()
      {
      }

      // mem_total
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          int,
          pgsql::id_integer >::query_type,
        pgsql::id_integer >
      mem_total_type_;

      static const mem_total_type_ mem_total;

      // mem_available
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          int,
          pgsql::id_integer >::query_type,
        pgsql::id_integer >
      mem_available_type_;

      static const mem_available_type_ mem_available;

      // mem_free
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          int,
          pgsql::id_integer >::query_type,
        pgsql::id_integer >
      mem_free_type_;

      static const mem_free_type_ mem_free;
    };

    static const memory_class_ memory;

    // cpu
    //
    struct cpu_class_
    {
      cpu_class_ ()
      {
      }

      // idle_time
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          float,
          pgsql::id_real >::query_type,
        pgsql::id_real >
      idle_time_type_;

      static const idle_time_type_ idle_time;

      // use_time
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          float,
          pgsql::id_real >::query_type,
        pgsql::id_real >
      use_time_type_;

      static const use_time_type_ use_time;
    };

    static const cpu_class_ cpu;

    // process
    //
    struct process_class_
    {
      process_class_ ()
      {
      }

      // total
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          int,
          pgsql::id_integer >::query_type,
        pgsql::id_integer >
      total_type_;

      static const total_type_ total;

      // running
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          int,
          pgsql::id_integer >::query_type,
        pgsql::id_integer >
      running_type_;

      static const running_type_ running;

      // blocked
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          int,
          pgsql::id_integer >::query_type,
        pgsql::id_integer >
      blocked_type_;

      static const blocked_type_ blocked;
    };

    static const process_class_ process;

    // system_info
    //
    struct system_info_class_
    {
      system_info_class_ ()
      {
      }

      // system_ip
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      system_ip_type_;

      static const system_ip_type_ system_ip;

      // system_name
      //
      typedef
      pgsql::query_column<
        pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::query_type,
        pgsql::id_string >
      system_name_type_;

      static const system_name_type_ system_name;
    };

    static const system_info_class_ system_info;

    // time_stamp
    //
    typedef
    pgsql::query_column<
      pgsql::value_traits<
        long unsigned int,
        pgsql::id_bigint >::query_type,
      pgsql::id_bigint >
    time_stamp_type_;

    static const time_stamp_type_ time_stamp;
  };

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::id_type_
  query_columns< ::machineinfo, id_pgsql, A >::
  id (A::table_name, "\"id\"", 0);

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::client_key_type_
  query_columns< ::machineinfo, id_pgsql, A >::
  client_key (A::table_name, "\"client_key\"", 0);

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::memory_class_::mem_total_type_
  query_columns< ::machineinfo, id_pgsql, A >::memory_class_::
  mem_total (A::table_name, "\"memory_mem_total\"", 0);

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::memory_class_::mem_available_type_
  query_columns< ::machineinfo, id_pgsql, A >::memory_class_::
  mem_available (A::table_name, "\"memory_mem_available\"", 0);

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::memory_class_::mem_free_type_
  query_columns< ::machineinfo, id_pgsql, A >::memory_class_::
  mem_free (A::table_name, "\"memory_mem_free\"", 0);

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::memory_class_
  query_columns< ::machineinfo, id_pgsql, A >::memory;

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::cpu_class_::idle_time_type_
  query_columns< ::machineinfo, id_pgsql, A >::cpu_class_::
  idle_time (A::table_name, "\"cpu_idle_time\"", 0);

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::cpu_class_::use_time_type_
  query_columns< ::machineinfo, id_pgsql, A >::cpu_class_::
  use_time (A::table_name, "\"cpu_use_time\"", 0);

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::cpu_class_
  query_columns< ::machineinfo, id_pgsql, A >::cpu;

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::process_class_::total_type_
  query_columns< ::machineinfo, id_pgsql, A >::process_class_::
  total (A::table_name, "\"process_total\"", 0);

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::process_class_::running_type_
  query_columns< ::machineinfo, id_pgsql, A >::process_class_::
  running (A::table_name, "\"process_running\"", 0);

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::process_class_::blocked_type_
  query_columns< ::machineinfo, id_pgsql, A >::process_class_::
  blocked (A::table_name, "\"process_blocked\"", 0);

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::process_class_
  query_columns< ::machineinfo, id_pgsql, A >::process;

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::system_info_class_::system_ip_type_
  query_columns< ::machineinfo, id_pgsql, A >::system_info_class_::
  system_ip (A::table_name, "\"system_info_system_ip\"", 0);

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::system_info_class_::system_name_type_
  query_columns< ::machineinfo, id_pgsql, A >::system_info_class_::
  system_name (A::table_name, "\"system_info_system_name\"", 0);

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::system_info_class_
  query_columns< ::machineinfo, id_pgsql, A >::system_info;

  template <typename A>
  const typename query_columns< ::machineinfo, id_pgsql, A >::time_stamp_type_
  query_columns< ::machineinfo, id_pgsql, A >::
  time_stamp (A::table_name, "\"time_stamp\"", 0);

  template <typename A>
  struct pointer_query_columns< ::machineinfo, id_pgsql, A >:
    query_columns< ::machineinfo, id_pgsql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::machineinfo, id_pgsql >:
    public access::object_traits< ::machineinfo >
  {
    public:
    struct id_image_type
    {
      long long id_value;
      bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // id_
      //
      long long id_value;
      bool id_null;

      // client_key
      //
      details::buffer client_key_value;
      std::size_t client_key_size;
      bool client_key_null;

      // memory
      //
      composite_value_traits< ::Memory, id_pgsql >::image_type memory_value;

      // cpu
      //
      composite_value_traits< ::CPU, id_pgsql >::image_type cpu_value;

      // process
      //
      composite_value_traits< ::Process, id_pgsql >::image_type process_value;

      // system_info
      //
      composite_value_traits< ::SystemInfo, id_pgsql >::image_type system_info_value;

      // time_stamp
      //
      long long time_stamp_value;
      bool time_stamp_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          bool*);

    static void
    bind (pgsql::bind*,
          image_type&,
          pgsql::statement_kind);

    static void
    bind (pgsql::bind*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          pgsql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef pgsql::object_statements<object_type> statements_type;

    typedef pgsql::query_base query_base_type;

    static const std::size_t column_count = 13UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    static const char persist_statement_name[];
    static const char find_statement_name[];
    static const char update_statement_name[];
    static const char erase_statement_name[];
    static const char query_statement_name[];
    static const char erase_query_statement_name[];

    static const unsigned int persist_statement_types[];
    static const unsigned int find_statement_types[];
    static const unsigned int update_statement_types[];

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::machineinfo, id_common >:
    public access::object_traits_impl< ::machineinfo, id_pgsql >
  {
  };

  // machineinfo
  //
}

#include "machine_info-odb.ixx"

#include <odb/post.hxx>

#endif // MACHINE_INFO_ODB_HXX
